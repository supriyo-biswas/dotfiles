#!/usr/bin/env python3

import sys
from collections import OrderedDict
from signal import signal, SIGPIPE, SIG_DFL

signal(SIGPIPE, SIG_DFL)

def print_dups(file):
	line_number = 0
	found_dups = False
	dups = OrderedDict()

	for line in file:
		line_number += 1

		if not line.strip():
			continue

		if line not in dups:
			dups[line] = [1, [line_number]]
		else:
			found_dups = True
			dups[line][0] += 1
			if dups[line][0] <= 5:
				dups[line][1].append(line_number)

	print('%s:' % file.name)

	if not found_dups:
		print('  No duplicates found.')

	for line in dups:
		val = dups[line]

		if val[0] == 1:
			continue

		print(' %s (%s duplicates, on lines ' % (line.rstrip(), val[0]), end='')
		print(*val[1], sep=', ', end='')

		if val[0] > 5:
			print(' and %i others)' % (val[0] - 5))
		else:
			print(')')

if len(sys.argv) > 1 and sys.argv[1] in ['-h', '--help']:
	print('Find duplicate lines present in files.')
	print('Usage: %s file [file ...]' % sys.argv[0])
	sys.exit(0)

args = sys.argv[1:]
rv = 0

try:
	if not args:
		try:
			print_dups(sys.stdin)
		except IOError as e:
			sys.stderr.write('%s\n' % e)
			rv = 1
	else:
		try:
			for arg in args:
				with open(arg, 'r') as f:
					for arg in args:
						print_dups(f)
		except IOError as e:
			sys.stderr.write('%s\n' % e)
			rv = 1
except KeyboardInterrupt:
	pass

sys.exit(rv)
